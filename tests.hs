module Tests where
    import Poker
    import System.IO
    import Control.Monad

    -- testcase x
    --     |x==0 = [14, 48, 46, 44, 16] -- high card
    --     |x==1 = [52, 26, 32, 15, 3] -- one pair
    --     |x==2 = [12, 51, 43, 30, 1] -- two pair
    --     |x==3 = [8, 47, 34, 50, 31] -- three of a kind
    --     |x==4 = [2, 29, 17, 5, 45] -- straight
    --     |x==5 = [13, 10, 9, 7, 6] -- flush
    --     |x==6 = [10, 49, 23, 28, 41] -- full house
    --     |x==7 = [11, 24, 37, 50, 40] -- four of a kind
    --     |x==8 = [18, 19, 20, 21, 22] -- straight flush
    --     |x==9 = [36, 37, 38, 39, 27] -- royal flush
    --     |otherwise = [1,2,3,4,5] -- general case
    
    -- test x y = do
    --     let hand1 = Poker.sortHand (testcase x)
    --     let hand2 = Poker.sortHand (testcase y)
    --     let winner = Poker.determineWinner hand1 hand2
    --     Poker.convert winner


    runTestCases = do
        let testCases = [[14, 10, 17, 11, 15, 7, 16, 9, 18, 8],[16, 10, 18, 8, 14, 9, 17, 7, 15, 11],[16, 49, 14, 9, 17, 35, 15, 22, 18, 48],[16, 9, 14, 48, 15, 35, 18, 22, 17, 49],[23, 9, 49, 2, 10, 48, 50, 22, 36, 35],[49, 35, 23, 22, 50, 2, 10, 48, 36, 9],[48, 40, 34, 42, 21, 44, 8, 45, 35, 50],[35, 42, 34, 44, 21, 40, 8, 45, 48, 50],[5, 34, 2, 31, 4, 29, 3, 28, 7, 30],[4, 30, 2, 34, 3, 28, 5, 29, 7, 31],[2, 47, 3, 10, 31, 46, 32, 24, 17, 48],[32, 10, 31, 48, 2, 46, 3, 24, 17, 47],[28, 12, 15, 11, 2, 13, 30, 26, 29, 39],[28, 39, 2, 11, 15, 13, 30, 26, 29, 12],[22, 13, 16, 26, 30, 25, 43, 2, 3, 12],[3, 13, 30, 25, 43, 2, 22, 26, 16, 12],[14, 41, 15, 52, 1, 27, 2, 28, 51, 40],[1, 41, 15, 27, 2, 40, 51, 28, 14, 52],[23, 46, 41, 42, 10, 15, 48, 2, 44, 50],[44, 50, 23, 15, 41, 46, 48, 2, 10, 42],[7, 51, 6, 47, 8, 49, 13, 28, 41, 29],[41, 29, 13, 51, 6, 28, 8, 49, 7, 47],[41, 29, 12, 49, 6, 47, 8, 28, 7, 52],[12, 47, 7, 49, 6, 29, 8, 28, 41, 52],[47, 40, 20, 52, 7, 51, 46, 49, 33, 50],[7, 50, 46, 52, 47, 51, 33, 40, 20, 49],[17, 47, 18, 22, 16, 35, 15, 9, 14, 49],[17, 9, 15, 49, 14, 22, 18, 47, 16, 35],[14, 9, 17, 32, 16, 22, 18, 47, 15, 49],[14, 47, 17, 9, 15, 22, 18, 32, 16, 49],[17, 26, 16, 52, 18, 51, 14, 39, 15, 38],[15, 52, 16, 38, 14, 26, 18, 39, 17, 51],[10, 42, 23, 45, 49, 40, 50, 47, 36, 44],[23, 44, 49, 40, 36, 45, 50, 42, 10, 47],[34, 16, 48, 50, 21, 29, 8, 42, 35, 45],[8, 16, 48, 42, 34, 50, 21, 29, 35, 45],[50, 41, 23, 42, 10, 40, 36, 31, 49, 30],[50, 41, 36, 42, 10, 30, 23, 40, 49, 31],[31, 25, 32, 26, 2, 13, 30, 4, 3, 12],[2, 26, 31, 25, 30, 4, 3, 13, 32, 12],[30, 26, 31, 13, 32, 24, 2, 12, 3, 4],[30, 24, 2, 12, 32, 4, 3, 13, 31, 26],[2, 24, 3, 22, 31, 13, 30, 4, 32, 12],[31, 4, 30, 13, 2, 22, 3, 12, 32, 24],[3, 13, 1, 26, 5, 11, 9, 12, 7, 39],[3, 13, 1, 11, 9, 26, 5, 12, 7, 39],[3, 2, 1, 12, 5, 13, 7, 25, 9, 26],[5, 13, 7, 2, 1, 25, 3, 26, 9, 12],[3, 26, 1, 20, 9, 2, 5, 12, 7, 13],[9, 2, 5, 26, 7, 12, 1, 13, 3, 20],[6, 50, 7, 40, 41, 49, 8, 51, 13, 52],[8, 51, 41, 40, 6, 50, 13, 52, 7, 49],[6, 52, 7, 51, 26, 50, 13, 49, 8, 40],[7, 40, 13, 50, 6, 52, 26, 51, 8, 49],[21, 51, 8, 50, 26, 52, 13, 40, 6, 49],[8, 50, 6, 51, 26, 52, 21, 49, 13, 40],[21, 50, 26, 40, 34, 52, 13, 51, 8, 49],[26, 52, 34, 40, 13, 50, 8, 49, 21, 51],[17, 10, 15, 7, 14, 8, 16, 11, 18, 9],[18, 8, 14, 11, 17, 10, 15, 9, 16, 7],[15, 22, 18, 49, 17, 48, 16, 9, 14, 35],[14, 35, 18, 49, 16, 22, 17, 48, 15, 9],[17, 47, 3, 48, 32, 46, 31, 10, 2, 24],[31, 46, 17, 48, 2, 47, 32, 24, 3, 10],[13, 49, 8, 28, 41, 51, 7, 29, 6, 47],[8, 49, 13, 47, 7, 28, 6, 29, 41, 51],[16, 38, 15, 52, 18, 51, 14, 39, 17, 26],[17, 51, 14, 52, 16, 39, 15, 26, 18, 38],[17, 9, 18, 8, 16, 10, 14, 11, 15, 7],[16, 10, 15, 9, 17, 11, 18, 8, 14, 7],[18, 48, 15, 22, 17, 49, 14, 9, 16, 35],[14, 49, 18, 22, 16, 35, 17, 9, 15, 48],[3, 39, 2, 13, 30, 12, 32, 26, 31, 11],[2, 11, 30, 39, 31, 13, 32, 26, 3, 12],[33, 49, 46, 51, 47, 52, 20, 40, 7, 50],[47, 52, 33, 40, 20, 50, 7, 49, 46, 51],[17, 26, 15, 38, 18, 39, 16, 51, 14, 52],[18, 38, 16, 52, 15, 26, 14, 39, 17, 51],[32, 26, 2, 12, 30, 4, 31, 13, 3, 25],[2, 4, 3, 13, 32, 26, 30, 25, 31, 12],[32, 4, 2, 24, 30, 13, 3, 12, 31, 26],[3, 26, 32, 24, 2, 13, 30, 12, 31, 4],[3, 13, 32, 12, 31, 22, 30, 4, 2, 24],[3, 13, 32, 12, 31, 4, 2, 22, 30, 24],[34, 40, 26, 52, 13, 50, 21, 51, 8, 49],[26, 52, 21, 49, 8, 51, 13, 50, 34, 40]]
        let answerKey = [["10C", "11C", "7C", "8C", "9C"],["10C", "11C", "7C", "8C", "9C"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["10C", "10D", "10H", "10S", "11S"],["10C", "10D", "10H", "10S", "11S"],["8C", "8D", "8H", "9H", "9S"],["8C", "8D", "8H", "9H", "9S"],["2H", "3H", "4H", "5H", "8H"],["2H", "3H", "4H", "5H", "8H"],["10C", "11D", "7S", "8S", "9S"],["10C", "11D", "7S", "8S", "9S"],["11C", "12C", "13C", "13D", "13H"],["11C", "12C", "13C", "13D", "13H"],["12C", "12D", "13C", "13D", "2C"],["12C", "12D", "13C", "13D", "2C"],["13S", "1H", "1S", "2H", "2S"],["13S", "1H", "1S", "2H", "2S"],["10C", "10D", "2S", "5S", "9S"],["10C", "10D", "2S", "5S", "9S"],["13C", "2S", "6C", "7C", "8C"],["13C", "2S", "6C", "7C", "8C"],["10S", "13S", "2H", "3H", "8S"],["10S", "13S", "2H", "3H", "8S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["10C", "10D", "10H", "10S", "11S"],["10C", "10D", "10H", "10S", "11S"],["8C", "8D", "8H", "9H", "9S"],["8C", "8D", "8H", "9H", "9S"],["10C", "10D", "10H", "10S", "11S"],["10C", "10D", "10H", "10S", "11S"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["1C", "3C", "5C", "7C", "9C"],["1C", "3C", "5C", "7C", "9C"],["1C", "3C", "5C", "7C", "9C"],["1C", "3C", "5C", "7C", "9C"],["1C", "3C", "5C", "7C", "9C"],["1C", "3C", "5C", "7C", "9C"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["10C", "11C", "7C", "8C", "9C"],["10C", "11C", "7C", "8C", "9C"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["10C", "11D", "7S", "8S", "9S"],["10C", "11D", "7S", "8S", "9S"],["13C", "2S", "6C", "7C", "8C"],["13C", "2S", "6C", "7C", "8C"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["10C", "11C", "7C", "8C", "9C"],["10C", "11C", "7C", "8C", "9C"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"],["1D", "2D", "3D", "4D", "5D"],["1D", "2D", "3D", "4D", "5D"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["2C", "3C", "4H", "5H", "6H"],["10S", "11S", "12S", "13S", "1S"],["10S", "11S", "12S", "13S", "1S"]]
        checkTestCases testCases answerKey [] []

    checkTestCases [] [] passed failed = failed
    checkTestCases tests answers passed failed
        | tests == [] = failed
        | otherwise = do
            let input = head tests
                output = Poker.deal input
                expected = head answers
                newPassed = passed
                newFailed = failed
            if output == expected
                then checkTestCases (tail tests) (tail answers) (passed ++ output) (failed)
                else checkTestCases (tail tests) (tail answers) passed (failed ++ [(input, output, expected)])
    
    -- checkTestCases test answer failed passed
    --     | null test = [passed, failed]
    --     | otherwise = do
    --         let input = head test
    --         let output =  head answer
    --         if ( (Poker.deal input) == output )
    --             then checkTestCases ((tail) test) ((tail) answer) failed (passed ++ [((map) show input)])
    --         else
    --             checkTestCases ((tail) test) ((tail) answer) (failed ++ ( ((map) show output) : ((map) show ((Poker.deal) input)) : ((map) show input) :[] ) ) passed
